buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'gs-spring-boot'
    version =  '0.1.0'
}

import java.util.regex.Matcher

group 'george.stoica'
version '1.0-SNAPSHOT'

repositories {
    jcenter()
}

sourceCompatibility = 10

dependencies {
    implementation project(':webapi.models')
    implementation ('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"

        // exclude javax.annotation package. this package is being imported by undertow as well
        // causing a compile time conflict.
        exclude group: 'javax.annotation', module: 'javax.annotation-api'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        // exclude javax.annotation package. this package is being imported by undertow as well
        // causing a compile time conflict.
        exclude group: 'javax.annotation', module: 'javax.annotation-api'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
        exclude group: 'org.hamcrest', module: 'hamcrest-library'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//        exclude  group: 'junit', module: 'junit'
    }
}

ext.moduleName = 'george.stoica.webapi.startup'

mainClassName = "$moduleName/WebApiApplication"

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module', mainClassName,
                '--show-module-resolution'
        ]
        classpath = files()
    }
}

startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
        classpath = files()
        defaultJvmOpts = [
                '--module-path', 'APP_HOME_LIBS',
                '--module', mainClassName
        ]
    }
    doLast{
        def bashFile = new File(outputDir, applicationName)
        String bashContent = bashFile.text
        bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

        def batFile = new File(outputDir, applicationName + ".bat")
        String batContent = batFile.text
        batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
}
